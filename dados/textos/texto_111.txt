Título: Entendendo Programação Orientada a Objetos (POO) em Java

Photo by Caspar Camille Rubin on UnsplashOi pessoal! Hoje, quero compartilhar um conceito essencial na jornada de qualquer programador: Programação Orientada a Objetos (POO). Vamos abordar a POO em Java de uma maneira simples e direta, desmistificando alguns conceitos que, no começo, podem parecer complicados. Pronto? Vamos nessa!O que é POO?A Programação Orientada a Objetos (POO) é um paradigma de programação que foca na criação de “objetos” para representar entidades do mundo real ou conceitos dentro do nosso sistema. Esses objetos podem ter características (chamadas de atributos) e comportamentos (chamados de métodos).Em vez de apenas trabalhar com funções e dados de forma separada, como na programação procedural, a POO junta tudo isso dentro dos objetos, criando uma estrutura mais modular, intuitiva e reutilizável.Quatro pilares da POOPara entender POO de verdade, precisamos nos familiarizar com seus quatro pilares principais:1. EncapsulamentoO encapsulamento é como um escudo protetor para os atributos e métodos de um objeto. Ele nos ajuda a controlar o acesso a esses dados, deixando visível apenas o que é necessário. Em Java, usamos modificadores de acesso como private, public e protected para definir quem pode acessar certos dados.Exemplo simples:public class Pessoa {    private String nome;    private int idade;    // Construtor    public Pessoa(String nome, int idade) {        this.nome = nome;        this.idade = idade;    }    // Método para acessar o nome    public String getNome() {        return nome;    }    // Método para modificar o nome    public void setNome(String nome) {        this.nome = nome;    }}Aqui, os atributos nome e idade são privados, ou seja, ninguém de fora pode acessá-los diretamente. Eles precisam passar pelos métodos públicos getNome e setNome, garantindo que os dados estejam mais protegidos.2. HerançaHerança é quando uma classe herda os atributos e métodos de outra classe. Isso nos permite reutilizar código e evitar duplicações. 