Título: Algoritmos de busca e ordenação

DESENVOLVIMENTO DE SOFTWAREAlgoritmos de busca e ordenação são componentes essenciais em ciência da computação e são amplamente utilizados em uma variedade de aplicações, desde a organização de dados até a otimização de algoritmos de busca na web. Vou detalhar alguns dos algoritmos mais comuns em cada categoria e fornecer exemplos para ilustrar seu funcionamento.Photo by Safar Safarov on UnsplashAlgoritmos de Busca:Busca Linear:Este é um dos métodos mais simples de busca, onde cada elemento da lista é examinado sequencialmente até que o elemento desejado seja encontrado ou o fim da lista seja alcançado.Exemplo: Buscar por um número em uma lista não ordenadadef busca_linear(lista, alvo):    for i, item in enumerate(lista):        if item == alvo:            return i    return -1lista = [3, 1, 4, 1, 5, 9, 2, 6]alvo = 5print(busca_linear(lista, alvo))  # Saída: 4 (índice do elemento 5 na lista)Neste exmeplo ele percorre cada elemento de uma lista, um por um, até encontrar o item desejado ou até chegar ao final da lista.def busca_linear(lista, item):    for i in range(len(lista)):        if lista[i] == item:            return i    return None2. Busca Binária:Funciona apenas em listas ordenadas. Divide repetidamente a lista ao meio e compara o elemento alvo com o elemento no meio da lista, eliminando metade dos elementos restantes a cada iteração.É muito eficiente, com complexidade O(log n), onde n é o número de elementos na lista.Exemplo: Buscar por um número em uma lista ordenada.def busca_binaria(lista, alvo):    baixo, alto = 0, len(lista) - 1    while baixo <= alto:        meio = (baixo + alto) // 2        if lista[meio] == alvo:            return meio        elif lista[meio] < alvo:            baixo = meio + 1        else:            alto = meio - 1    return -1lista = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]alvo = 5print(busca_binaria(lista, alvo))  # Saída: 4 (índice do elemento 5 na lista)Neste é um algoritmo de busca mais eficiente, mas requer que a lista esteja ordenad